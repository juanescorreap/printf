.\" Automatically generated by Pandoc 2.5
.\"
.TH "_Printf Printf 1.0" "" "July 2021" "" ""
.hy
.PP
#NAME
.PP
_Printf \- The functions in the printf() family produce output according
to a format as described below.
.PP
#SYPNOSIS
.PP
int _printf(const char *format, \&...)
.PP
#DESCRIPTION
.PP
This function write the output under the control of a format stringthat
specifies how subsequent arguments (or arguments accessed via the
variable\-length argument facilities of stdarg(3)) are converted for
output.
.PP
FORMAT OF THE FORMAT STRING
.PP
The format string is a character string, beginning and ending in itsinit
.PD 0
.P
.PD
ial shift state, if any.
The format string is compose of zero or more directives: ordinary
characters (not %), which are copied unchanged to the output stream; and
conversion specifications, each of which results in fetchingzero or more
subsequent arguments.
Each conversion specification is introduced by the character %, and ends
with a converion specifier.
.PP
Warning: Without a % identifir, the program return a error.
.PP
#OPTIONS
.PP
The option %s is used to replace some part of the string with the
argument of the same type string.
.PP
When we have double %% the function just print one %.
.PP
The option %c is used to replace some part of the string with the
argumets of type char.
.PP
The option %i is used to replace some part of the string with the
argument of type integer number.
.PP
The option %u is used to replace some part of the string with an
argument of type unsigned (numbers that be positive (don[cq]t
negative)).
.PP
The option %o is used to replace some part of the string with an
argument of type octal.
.PP
The option %x is used to replace some part of the string with an arguent
of type Hexadecimal in lowercase.
.PP
The option %X is used to replace some part of the string with an
argument of type
.PP
#EXAMPLES
.PP
_printf([lq]Let[cq]s try to printf a simple sentence.[rq]); In this case
we don[cq]t use none % identifier.
.PP
_printf([lq]Negative:[%d][rq], \-762534); In this example we use the %d
decimal identifier.
.PP
_printf([lq]Unsigned:[%u][rq], ui); In this case we use the %u unsigned
identifier
.PP
_printf([lq]Unsigned octal:[%o][rq], ui); In this example we use the %o
octal identifier.
.PP
_printf([lq]Unsigned hexadecimal:[%x, %X][rq], ui, ui); In this example
we use %x and %X hexadecimal lower and upper case.
.PP
_printf([lq]Character:[%c][rq], \[ga]H\[cq]); In this example we use %c
character identifier.
.PP
_printf([lq]String:[%s][rq], [lq]I am a string ![rq]); In this example
we use %s strings identifier.
.PP
_printf([lq]Percent:[%%][rq]); In this case we use double %% to prints
one %.
.SH AUTHORS
Andres Medina, Juan Correa & Pablo Osorio.
